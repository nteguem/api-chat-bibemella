const axios = require('axios');
const { getAllProduct } = require('../../services/product.service');
const { getAllSubscriptions } = require('../../services/subscription.service');
const MonetBil = require('../MonetBil');
require('dotenv').config(); // Charger les variables d'environnement depuis le fichier .env
const { MessageMedia } = require('whatsapp-web.js');

const welcomeStatusUser = {};
const transactionSteps = {};

const COMMAND_NAME = { ENSEIGNEMENTS: '1', NFT: '2', WELNESS: '3' };

const UserCommander = async (msg) => {

  const contact = await msg.getContact();
  const welcomeMessage = `üåç Salut ${contact.pushname} et bienvenue √† la Fondation Bibemella, le temple de la Culture Africaine. Explorez nos services exceptionnels pour une exp√©rience unique :

    1Ô∏è‚É£ Pour recevoir nos enseignements, tapez 1.
    2Ô∏è‚É£ Pour d√©couvrir notre collection d'objets d'art num√©rique (NFTs), tapez 2.
    3Ô∏è‚É£ Pour en savoir plus sur notre Wellness Center et nos journ√©es sportives, tapez 3.
    0Ô∏è‚É£ Pour revenir au menu principal, tapez 0.

    Nous sommes l√† pour vous aider √† vous immerger dans la culture africaine et √† r√©pondre √† vos besoins. Tapez simplement le num√©ro correspondant pour commencer. Comment pouvons-nous vous assister aujourd'hui ? ü§ù`;

  if (!welcomeStatusUser[msg.from]) {
    // Envoyer le message de bienvenue la premi√®re fois
    msg.reply(welcomeMessage);

    // Enregistrer l'√©tat de bienvenue pour cet utilisateur
    welcomeStatusUser[msg.from] = true;
  } else if (!msg.isGroupMsg) {
    const userResponse = msg.body.trim();

    if (userResponse === COMMAND_NAME.ENSEIGNEMENTS && !transactionSteps[msg.from]) {
      const allSubscriptionsResponse = await getAllSubscriptions();
      if (allSubscriptionsResponse.success) {
        const subscriptions = allSubscriptionsResponse.subscriptions;
        const replyMessage = 'Choisissez un forfait en r√©pondant avec son num√©ro :\n' +
          subscriptions.map((subscription, index) => {
            return `${index + 1}. ${subscription.description}`;
          }).join('\n');
        msg.reply(replyMessage);

        // Enregistrer l'√©tape de la transaction pour cet utilisateur
        transactionSteps[msg.from] = { step: 'ask_forfait', type: 'ENSEIGNEMENTS', subscriptions };
      } else {
        const replyMessage = 'Erreur lors de la r√©cup√©ration des forfaits.';
        msg.reply(replyMessage);
      }
    } else if (/^\d+$/.test(userResponse) && transactionSteps[msg.from] && transactionSteps[msg.from].step === 'ask_forfait') {
      const selectedForfaitIndex = parseInt(msg.body) - 1;
      const subscriptions = transactionSteps[msg.from].subscriptions;

      if (selectedForfaitIndex >= 0 && selectedForfaitIndex < subscriptions.length) {
        const selectedForfait = subscriptions[selectedForfaitIndex];
        const phoneNumberMessage = 'Veuillez entrer votre num√©ro de t√©l√©phone pour la transaction Mobile Money (ex: 6xxxxxxxx):';
        msg.reply(phoneNumberMessage);

        // Enregistrer l'√©tape de la transaction pour cet utilisateur
        transactionSteps[msg.from].step = 'ask_phone_number';
        transactionSteps[msg.from].selectedForfait = selectedForfait;
      } else {
        const invalidForfaitMessage = 'Le num√©ro de forfait s√©lectionn√© est invalide. R√©essayez en fournissant un num√©ro valide.';
        msg.reply(invalidForfaitMessage);
      }
    } else if (transactionSteps[msg.from] && transactionSteps[msg.from].step === 'ask_phone_number') {
      const phoneNumber = userResponse.replace(/\s+/g, '');

      if (/^(?:\+237)?6(?:9|8|7|5)\d{7}$/.test(phoneNumber)) {
        const selectedForfait = transactionSteps[msg.from].selectedForfait;
        MonetBil.processPayment(msg, phoneNumber, selectedForfait, transactionSteps);
      } else {
        const invalidPhoneNumberMessage = 'Le num√©ro de t√©l√©phone est invalide. Veuillez saisir un num√©ro de t√©l√©phone au format valide (ex: 6xxxxxxxx).';
        msg.reply(invalidPhoneNumberMessage);
      }
    } else if (userResponse === COMMAND_NAME.NFT) {
      // R√©cup√©rer la liste des produits depuis la base de donn√©es
      const allProductsResponse = await getAllProduct();
      if (allProductsResponse.success) {
        const products = allProductsResponse.products;
    
        for (const product of products) {
          // R√©cup√©rer l'image en tant que donn√©es binaires
          const imageResponse = await axios.get(product.image, { responseType: 'arraybuffer' });
          const imageBase64 = Buffer.from(imageResponse.data).toString('base64');
    
          // Cr√©er un objet MessageMedia avec l'image
          const media = new MessageMedia('image/jpeg', imageBase64);
    
          // Construire le message avec les d√©tails
          const replyMessage = `*${product.name}*\n\n${product.description}\n\n${product.price} XAF\n\nPlus de d√©tails: ${product.link}`;
    
          // Envoyer l'image avec le texte en utilisant la fonction caption
          await msg.reply(media, msg.from, { caption: replyMessage });
        }
    
        const productNameMessage = 'Entrez le nom du produit que vous souhaitez acheter :';
        msg.reply(productNameMessage);
    
        transactionSteps[msg.from] = { step: 'awaitProductName' };
      } else {
        const replyMessage = 'Erreur lors de la r√©cup√©ration des produits.';
        msg.reply(replyMessage);
      }
    }
     else if (transactionSteps[msg.from] && transactionSteps[msg.from].step === 'awaitProductName') {

      const allProductsResponse = await getAllProduct();
      const products = allProductsResponse.products;

      const userProductName = userResponse.toLowerCase(); // Nom du produit entr√© par l'utilisateur
      const product = products.find((p) => p.name.toLowerCase() === userProductName.toLowerCase());

      if (product) {
        // Le produit a √©t√© trouv√©. Demandez au client le mode de paiement.
        const paymentMethodMessage = 'Choisissez le mode de paiement :\n1. Paiement Mobile Money\n2. Paiement Ejara';
        msg.reply(paymentMethodMessage);

        // Enregistrez le produit s√©lectionn√© pour la prochaine √©tape.
        selectedProduct = product;

        transactionSteps[msg.from] = { step: 'awaitPaymentMethod' };
      } else {
        const invalidProductNameMessage = 'Le produit que vous avez entr√© est introuvable. Veuillez entrer un nom de produit valide.';
        msg.reply(invalidProductNameMessage);
      }
    } else if (transactionSteps[msg.from] && transactionSteps[msg.from].step === 'awaitPaymentMethod') {

      if (userResponse === '1') {
        // L'utilisateur a choisi le paiement Mobile Money.
        const phoneNumberMessage = 'Veuillez entrer votre num√©ro de t√©l√©phone pour la transaction Mobile Money (ex: 6xxxxxxxx):';
        msg.reply(phoneNumberMessage);

        transactionSteps[msg.from] = { step: 'askPhoneNumber', selectedProduct };
      } else if (userResponse === '2') {
        // L'utilisateur a choisi le paiement Ejara.
        const replyMessage = 'Bot en cours de d√©veloppement.';
        msg.reply(replyMessage);

        transactionSteps[msg.from] = { step: 'start' };
      } else {
        const invalidPaymentMethodMessage = 'Choisissez une option de paiement valide (1 ou 2).';
        msg.reply(invalidPaymentMethodMessage);
      }
    } else if (transactionSteps[msg.from] && transactionSteps[msg.from].step === 'askPhoneNumber') {
      const phoneNumber = userResponse.replace(/\s+/g, '');

      if (/^(?:\+237)?6(?:9|8|7|5)\d{7}$/.test(phoneNumber)) {
        const selectedProduct = transactionSteps[msg.from].selectedProduct;
        MonetBil.processPayment(msg, phoneNumber, selectedProduct, transactionSteps);
      } else {
        const invalidPhoneNumberMessage = 'Le num√©ro de t√©l√©phone est invalide. Veuillez saisir un num√©ro de t√©l√©phone au format valide (ex: 6xxxxxxxx).';
        msg.reply(invalidPhoneNumberMessage);
      }
    }
    else if (userResponse === COMMAND_NAME.WELNESS) {
      const invalidRequestMessage = `Bot en cours de d√©veloppement pour r√©pondre √† tous ces services ult√©rieurement.`;
      msg.reply(invalidRequestMessage);
    } else if (userResponse === '0') {
      // R√©initialiser l'√©tat de l'utilisateur et renvoyer le message de bienvenue
      delete transactionSteps[msg.from];
      welcomeStatusUser[msg.from] = false;
      msg.reply(welcomeMessage);
    } else {
      // G√©rer d'autres cas d'utilisation ou afficher un message d'erreur
      const invalidRequestMessage = `Bot en cours de d√©veloppement pour r√©pondre √† tous ces services ult√©rieurement.`;
      msg.reply(invalidRequestMessage);
    }
  }
};

module.exports = {
  UserCommander,
};
